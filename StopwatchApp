import sys
import os
from PyQt5.QtWidgets import QApplication, QLabel, QPushButton, QGridLayout, QWidget, QSizePolicy, QMessageBox
from PyQt5.QtCore import QTimer, Qt, QDateTime
from PyQt5.QtGui import QFont, QPalette, QColor

#Main app window from QWidget, customizes layout and buttons
class StopwatchApp(QWidget):
    def __init__(self):
        super().__init__()

        self.times_list = []

        self.elapsed_time = 0
        self.is_running = False

        self.timer_label = QLabel('00:00:00')
        self.timer_label.setAlignment(Qt.AlignCenter)
        self.timer_label.setFont(QFont('Arial', 80, QFont.Bold))  # Set font size to 80 and bold

        self.timer = QTimer()
        self.timer.timeout.connect(self.update_stopwatch)

        self.start_button = QPushButton('Start')
        self.start_button.clicked.connect(self.start_timer)
        self.start_button.setStyleSheet(
            "QPushButton {background-color: #ADD8E6; color: green; border: 2px solid gray; border-radius: 10px; min-height: 100px; font-size: 65px; font-weight: bold;}"
            "QPushButton:pressed {background-color: #87CEFA;}")

        self.stop_button = QPushButton('Stop')
        self.stop_button.clicked.connect(self.stop_timer)
        self.stop_button.setStyleSheet(
            "QPushButton {background-color: #ADD8E6; color: red; border: 2px solid gray; border-radius: 10px; min-height: 100px; font-size: 65px; font-weight: bold;}"
            "QPushButton:pressed {background-color: #87CEFA;}")

        self.reset_button = QPushButton('Reset')
        self.reset_button.clicked.connect(self.reset_timer)
        self.reset_button.setStyleSheet(
            "QPushButton {background-color: #ADD8E6; color: white; border: 2px solid gray; border-radius: 10px; min-height: 80px; font-size: 40px; font-weight: bold;}"
            "QPushButton:pressed {background-color: #87CEFA;}")

        self.add_time_button = QPushButton('Add Time')
        self.add_time_button.setShortcut(' ')
        self.add_time_button.clicked.connect(self.add_time_to_list)
        self.add_time_button.setStyleSheet(
            "QPushButton {background-color: #ADD8E6; color: white; border: 2px solid gray; border-radius: 10px; min-height: 80px; font-size: 40px; font-weight: bold;}"
            "QPushButton:pressed {background-color: #87CEFA;}")

        self.setLayout(QGridLayout())
        layout = self.layout()
        layout.addWidget(self.timer_label, 0, 0, 1, 2)
        layout.addWidget(self.start_button, 1, 0)
        layout.addWidget(self.stop_button, 1, 1)
        layout.addWidget(self.reset_button, 2, 0)
        layout.addWidget(self.add_time_button, 2, 1)

        # Set button size policies to make them expand to fill available space
        self.start_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.stop_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.reset_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.add_time_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        # Set the background color to dark gray
        palette = self.palette()
        palette.setColor(QPalette.Background, QColor(70, 70, 70))
        self.setAutoFillBackground(True)
        self.setPalette(palette)

    #starts the timer when start button is clicked
    def start_timer(self):
        if not self.is_running:
            self.start_button.setEnabled(False)
            self.stop_button.setEnabled(True)
            self.reset_button.setEnabled(False)
            self.timer.start(10)  # Update every 10 milliseconds
            self.is_running = True

    #stops the timer when stop is clicked, prompts user to confirm the stop and asks to save records
    def stop_timer(self):
        if self.is_running:
            self.timer.stop()
            reply = QMessageBox.question(
                self, "Stop Timer", "Are you sure you want to stop the time?",
                QMessageBox.Yes | QMessageBox.No, QMessageBox.No
            )
            if reply == QMessageBox.Yes:
                self.is_running = False
                self.start_button.setEnabled(True)
                self.stop_button.setEnabled(False)
                self.reset_button.setEnabled(True)
                self.confirm_save()
            else:
                self.timer.start(10)  # Restart the timer

    #Displays a confirmation message box asking if the user wants to save the recorded times.
    def confirm_save(self):
        reply = QMessageBox.question(
            self, "Save Times", "Do you want to save the recorded times?",
            QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes
        )
        if reply == QMessageBox.Yes:
            self.save_times()

    #Resets the timer and clears the list of recorded times when the "Reset" button is clicked.
    def reset_timer(self):
        self.elapsed_time = 0
        self.update_display()
        self.times_list.clear()
        self.reset_button.setEnabled(False)

#called every 10 millisecs to update timer
    def update_stopwatch(self):
        self.elapsed_time += 10  # 10 milliseconds
        self.update_display()

#updates stopwatch display with current elapsed time
    def update_display(self):
        # Format elapsed_time into HH:MM:SS
        milliseconds = self.elapsed_time
        seconds = int(milliseconds / 1000) % 60
        minutes = int((milliseconds / (1000 * 60)) % 60)
        hours = int((milliseconds / (1000 * 60 * 60)) % 24)

        time_str = f"{hours:02}:{minutes:02}:{seconds:02}"
        self.timer_label.setText(time_str)

#records the current elapsed time to a list when "add time" button is pressed(spacebar)
    def add_time_to_list(self):
        if self.is_running:
            self.times_list.append(self.elapsed_time)

#saves list of elapsed times ti a file
    def save_times_to_file(self, folder, filename):
        # Create the folder if it doesn't exist
        os.makedirs(folder, exist_ok=True)

        filepath = os.path.join(folder, filename)

        with open(filepath, 'w') as file:
            for elapsed_time in self.times_list:
                # Convert elapsed_time to HH:MM:SS format
                seconds = int(elapsed_time / 1000) % 60
                minutes = int((elapsed_time / (1000 * 60)) % 60)
                hours = int((elapsed_time / (1000 * 60 * 60)) % 24)

                time_str = f"{hours:02}:{minutes:02}:{seconds:02}"
                file.write(time_str + '\n')

#generates timestamp andfile name, calls save_time_to_file to save the times in specific file/ folder
    def save_times(self):
        current_datetime = QDateTime.currentDateTime()
        timestamp = current_datetime.toString("yyyyMMdd_hhmmss")
        folder = r"C:\Users\FrankCandreva\PycharmProjects\testing\spacebar_presses"  # Use a raw string (r"") to represent the folder path
        filename = f'DMA_interview_times_{timestamp}.txt'  # Add timestamp to the filename
        self.save_times_to_file(folder, filename)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    stopwatch_app = StopwatchApp()
    stopwatch_app.setWindowTitle('Stopwatch App')
    stopwatch_app.show()
    sys.exit(app.exec_())
