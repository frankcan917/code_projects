import sys
import os
from PyQt5.QtWidgets import QApplication, QLabel, QPushButton, QGridLayout, QWidget, QSizePolicy, QMessageBox, \
    QInputDialog
from PyQt5.QtCore import QTimer, Qt, QEventLoop
from PyQt5.QtGui import QFont, QPalette, QColor


# Main app window from QWidget, customizes layout and buttons
class StopwatchWindow(QWidget):
    def __init__(self):
        super().__init__()

        self.times_list = []
        self.elapsed_time = 0
        self.is_running = False
        self.button_press_count = 0
        self.reset_button_pressed = False  # Initialize the flag

        self.timer_label = QLabel('00:00:00')
        self.timer_label.setAlignment(Qt.AlignCenter)
        self.timer_label.setFont(QFont('Arial', 60, QFont.Bold))

        self.timer = QTimer()
        self.timer.timeout.connect(self.update_stopwatch)

        self.start_button = QPushButton('Start')
        self.start_button.clicked.connect(self.start_timer)
        self.start_button.setStyleSheet(
            "QPushButton {background-color: #ADD8E6; color: green; border: 2px solid gray; border-radius: 10px; min-height: 100px; font-size: 65px; font-weight: bold;}"
            "QPushButton:pressed {background-color: #87CEFA;}")

        self.stop_button = QPushButton('Stop')
        self.stop_button.clicked.connect(self.stop_timer)
        self.stop_button.setStyleSheet(
            "QPushButton {background-color: #ADD8E6; color: red; border: 2px solid gray; border-radius: 10px; min-height: 100px; font-size: 65px; font-weight: bold;}"
            "QPushButton:pressed {background-color: #87CEFA;}")

        self.reset_button = QPushButton('Reset')
        self.reset_button.clicked.connect(self.reset_timer)
        self.reset_button.setStyleSheet(
            "QPushButton {background-color: #ADD8E6; color: white; border: 2px solid gray; border-radius: 10px; min-height: 80px; font-size: 40px; font-weight: bold;}"
            "QPushButton:pressed {background-color: #87CEFA;}")

        self.add_time_button = QPushButton('Add Time')
        self.add_time_button.setShortcut(' ')
        self.add_time_button.clicked.connect(self.add_time_to_list)
        self.add_time_button.setStyleSheet(
            "QPushButton {background-color: #ADD8E6; color: white; border: 2px solid gray; border-radius: 10px; min-height: 80px; font-size: 40px; font-weight: bold;}"
            "QPushButton:pressed {background-color: #87CEFA;}")

        self.setLayout(QGridLayout())
        layout = self.layout()
        layout.addWidget(self.timer_label, 0, 0, 1, 2)
        layout.addWidget(self.start_button, 1, 0)
        layout.addWidget(self.stop_button, 1, 1)
        layout.addWidget(self.reset_button, 2, 0)
        layout.addWidget(self.add_time_button, 2, 1)

        self.start_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.stop_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.reset_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.add_time_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        palette = self.palette()
        palette.setColor(QPalette.Background, QColor(70, 70, 70))
        self.setAutoFillBackground(True)
        self.setPalette(palette)

    def start_timer(self):
        if not self.is_running:
            self.start_button.setEnabled(False)
            self.stop_button.setEnabled(True)
            self.reset_button.setEnabled(False)
            self.timer.start(10)
            self.is_running = True

    def stop_timer(self):
        if self.is_running:
            loop = QEventLoop()
            QTimer.singleShot(0, loop.quit)  # Delay execution to allow processing of events
            loop.exec_()  # Start the event loop

            reply = QMessageBox.question(
                self, "Stop Timer", "Are you sure you want to stop the time?",
                QMessageBox.Yes | QMessageBox.No, QMessageBox.No
            )
            if reply == QMessageBox.Yes:
                self.timer.stop()
                self.is_running = False
                self.start_button.setEnabled(True)
                self.stop_button.setEnabled(False)
                self.reset_button.setEnabled(True)
                self.confirm_save()
            else:
                self.timer.start(10)

    def reset_timer(self):
        self.elapsed_time = 0
        self.button_press_count = 0
        self.update_display()
        self.times_list.clear()
        self.reset_button.setEnabled(False)
        self.reset_button_pressed = True

    def update_stopwatch(self):
        self.elapsed_time += 10
        self.update_display()

    def get_formatted_time(self, milliseconds):
        seconds = int(milliseconds / 1000) % 60
        minutes = int((milliseconds / (1000 * 60)) % 60)
        hours = int((milliseconds / (1000 * 60 * 60)) % 24)

        return f"{hours:02}:{minutes:02}:{seconds:02}"

    def update_display(self):
        time_str = self.get_formatted_time(self.elapsed_time)
        self.timer_label.setText(time_str)

    def add_time_to_list(self):
        if self.is_running:
            self.times_list.append(self.elapsed_time)
            formatted_time = self.get_formatted_time(self.elapsed_time)
            self.button_press_count += 1
            print(f"Question: {self.button_press_count}. Time: {formatted_time}")

    def save_times_to_file(self, folder, filename):
        os.makedirs(folder, exist_ok=True)
        filepath = os.path.join(folder, filename)

        with open(filepath, 'w') as file:
            if self.reset_button_pressed:
                self.button_press_count = 1  # Reset the button_press_count to 0 only if the reset button was pressed
                self.reset_button_pressed = False  # Reset the flag

            for elapsed_time in self.times_list:
                formatted_time = self.get_formatted_time(elapsed_time)
                line = f"Question: {self.button_press_count}. Time: {formatted_time}\n"
                file.write(line)
                self.button_press_count += 1

    def save_times(self, file_name):
        folder = r"C:\Users\FrankCandreva\PycharmProjects\testing\spacebar_presses"
        filename = f'{file_name}.txt'
        self.save_times_to_file(folder, filename)

    def confirm_save(self):
        reply = QMessageBox.question(
            self, "Save Times", "Do you want to save the recorded times?",
            QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes
        )
        if reply == QMessageBox.Yes:
            file_name, ok = QInputDialog.getText(self, "Save Times", "Enter a file name:")
            if ok and file_name:
                self.reset_button_pressed = True  # Set the flag to True here
                self.save_times(file_name)

    def closeEvent(self, event):
        if self.is_running:
            reply = QMessageBox.question(
                self, "Stop Timer", "Are you sure you want to close the application?",
                QMessageBox.Yes | QMessageBox.No, QMessageBox.No
            )
            if reply == QMessageBox.Yes:
                self.timer.stop()
                self.is_running = False
                self.save_times("recorded_times")
                event.accept()
            else:
                event.ignore()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    stopwatch_app = StopwatchWindow()
    stopwatch_app.setWindowTitle('Stopwatch App')
    stopwatch_app.setGeometry(150, 1400, 200, 200)
    stopwatch_app.show()
    sys.exit(app.exec_())
